@page "/tree"
@using System
@using System.Collections.Generic
@using System.Linq
@using Cloud_In_A_Box.Components.Models
@using Microsoft.AspNetCore.Components

<h1>Sample Tree</h1>

<UITree Nodes="@_nodes" ExpandAsyncDelegate="@OnExpand" CollapseAsyncDelegate="@OnCollapse" LazyLoadNodesAsyncDelegate="@LoadNodes">
</UITree>

@functions {

    public List<UiTreeNode<string>> _nodes = new List<UiTreeNode<string>>(){
        new UiTreeNode<string>()
        {
            Text = "Node 1", Children = new List<UiTreeNode<string>>()
            {
                new UiTreeNode<string>() { Text = "ChildNode 1"},
                new UiTreeNode<string>() { Text = "ChildNode 2"},
                new UiTreeNode<string>() { Text = "ChildNode 3"},
                new UiTreeNode<string>() {
                    Text = "ChildNode 4", Children = new List<UiTreeNode<string>>()
                    {
                        new UiTreeNode<string>() { Text = "Nested ChildNode 1"},
                        new UiTreeNode<string>() { Text = "Nested ChildNode 2"},
                        new UiTreeNode<string>() { Text = "Nested ChildNode 3"},
                    }
                },
            }
        }
    };

    private UiTreeNode<string> _selectedNode { get; set; } = new UiTreeNode<string>();
    private string _logText;

    private async Task<bool> OnExpand(int Id)
    {
        System.Console.WriteLine("Expanded " + Id);
        return await Task.FromResult(true);
    }

    private async Task<bool> OnCollapse(int Id)
    {
        System.Console.WriteLine("Un Expanded " + Id);
        return await Task.FromResult(true);
    }

    private void OnSelectionChanged<T>(UIMouseEventArgs e, UiTreeNode<T> node)
    {
        if (node is UiTreeNode<string>)
        {
            _selectedNode.IsSelected = false;
            _selectedNode = node as UiTreeNode<string>;
        }
        StateHasChanged();
    }

    protected override async Task OnInitAsync()
    {

    }

    private async Task<List<UiTreeNode<string>>> LoadNodes(int? ParentId = null)
    {
        return new List<UiTreeNode<string>>(){
            new UiTreeNode<string>() { Text = "Node 1", Children = new List<UiTreeNode<string>>()
{
                    new UiTreeNode<string>() { Text = "ChildNode 1"},
                    new UiTreeNode<string>() { Text = "ChildNode 2"},
                    new UiTreeNode<string>() { Text = "ChildNode 3"},
                    new UiTreeNode<string>() { Text = "ChildNode 4", Children = new List<UiTreeNode<string>>()
{
                        new UiTreeNode<string>() { Text = "Nested ChildNode 1"},
                        new UiTreeNode<string>() { Text = "Nested ChildNode 2"},
                        new UiTreeNode<string>() { Text = "Nested ChildNode 3"},
                    }
                },
                }
            }
        };
    }

}